{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\n\nconst admin_1 = require(\"./admin\");\n\nconst bson_1 = require(\"./bson\");\n\nconst change_stream_1 = require(\"./change_stream\");\n\nconst collection_1 = require(\"./collection\");\n\nconst CONSTANTS = require(\"./constants\");\n\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\n\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\n\nconst error_1 = require(\"./error\");\n\nconst logger_1 = require(\"./logger\");\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst collections_1 = require(\"./operations/collections\");\n\nconst create_collection_1 = require(\"./operations/create_collection\");\n\nconst drop_1 = require(\"./operations/drop\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst indexes_1 = require(\"./operations/indexes\");\n\nconst profiling_level_1 = require(\"./operations/profiling_level\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst rename_1 = require(\"./operations/rename\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\n\nconst stats_1 = require(\"./operations/stats\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\"); // Allowed parameters\n\n\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'loggerLevel', 'logger', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\n\nclass Db {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client, databaseName, options) {\n    var _a;\n\n    options = options !== null && options !== void 0 ? options : {}; // Filter the options\n\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST); // Ensure we have a valid db name\n\n    validateDatabaseName(databaseName); // Internal state of the db object\n\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Logger instance\n      logger: new logger_1.Logger('Db', options),\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: (_a = options === null || options === void 0 ? void 0 : options.pkFactory) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName() {\n    return this.s.namespace.db;\n  } // Options\n\n\n  get options() {\n    return this.s.options;\n  }\n  /**\n   * slaveOk specified\n   * @deprecated Use secondaryOk instead\n   */\n\n\n  get slaveOk() {\n    return this.secondaryOk;\n  }\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n\n\n  get secondaryOk() {\n    var _a;\n\n    return ((_a = this.s.readPreference) === null || _a === void 0 ? void 0 : _a.preference) !== 'primary' || false;\n  }\n\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n\n\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  } // get the write Concern\n\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n\n  createCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    return (0, execute_operation_1.executeOperation)(this.s.client, new run_command_1.RunCommandOperation(this, command, options !== null && options !== void 0 ? options : {}), callback);\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n\n\n  aggregate() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\n    }\n\n    if (typeof pipeline === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\n    }\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new aggregation_cursor_1.AggregationCursor(this.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n\n\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n\n\n  collection(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n\n    const finalOptions = (0, utils_1.resolveOptions)(this, options);\n    return new collection_1.Collection(this, name, finalOptions);\n  }\n\n  stats(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  listCollections() {\n    let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n\n  renameCollection(fromCollection, toCollection, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    options = { ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    }; // Add return new collection\n\n    options.new_collection = true;\n    return (0, execute_operation_1.executeOperation)(this.s.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, options), callback);\n  }\n\n  dropCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  dropDatabase(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  collections(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  createIndex(name, indexSpec, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n\n    return (0, execute_operation_1.executeOperation)(this.s.client, new add_user_1.AddUserOperation(this, username, password, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  setProfilingLevel(level, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  profilingLevel(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  indexInformation(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\n   * Unref all sockets\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n\n\n  unref() {\n    (0, utils_1.getTopology)(this).unref();\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n\n\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the db logger */\n\n\n  getLogger() {\n    return this.s.logger;\n  }\n\n  get logger() {\n    return this.s.logger;\n  }\n\n}\n\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION; // TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\n\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"mappings":"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","names":["DB_OPTIONS_ALLOW_LIST","Db","constructor","client","databaseName","options","validateDatabaseName","s","logger","logger_1","readPreference","read_preference_1","fromOptions","bsonOptions","pkFactory","_a","utils_1","readConcern","read_concern_1","writeConcern","write_concern_1","namespace","db","slaveOk","secondaryOk","preference","toString","createCollection","name","callback","create_collection_1","command","run_command_1","aggregate","pipeline","arguments","length","error_1","aggregation_cursor_1","admin","admin_1","collection","finalOptions","collection_1","stats","stats_1","listCollections","filter","list_collections_cursor_1","renameCollection","fromCollection","toCollection","PRIMARY","new_collection","rename_1","dropCollection","drop_1","dropDatabase","collections","collections_1","createIndex","indexSpec","indexes_1","addUser","username","password","undefined","add_user_1","removeUser","remove_user_1","setProfilingLevel","level","set_profiling_level_1","profilingLevel","profiling_level_1","indexInformation","unref","watch","Array","isArray","change_stream_1","getLogger","exports","CONSTANTS","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","invalidChars","i","indexOf"],"sources":["D:\\Code\\HTML\\BlogProject\\node_modules\\mongodb\\src\\db.ts"],"sourcesContent":["import { Admin } from './admin';\nimport { BSONSerializeOptions, Document, resolveBSONOptions } from './bson';\nimport { ChangeStream, ChangeStreamDocument, ChangeStreamOptions } from './change_stream';\nimport { Collection, CollectionOptions } from './collection';\nimport * as CONSTANTS from './constants';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport { ListCollectionsCursor } from './cursor/list_collections_cursor';\nimport { MongoAPIError, MongoInvalidArgumentError } from './error';\nimport { Logger, LoggerOptions } from './logger';\nimport type { MongoClient, PkFactory } from './mongo_client';\nimport type { TODO_NODE_3286 } from './mongo_types';\nimport { AddUserOperation, AddUserOptions } from './operations/add_user';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { CollectionsOperation } from './operations/collections';\nimport type { IndexInformationOptions } from './operations/common_functions';\nimport { CreateCollectionOperation, CreateCollectionOptions } from './operations/create_collection';\nimport {\n  DropCollectionOperation,\n  DropCollectionOptions,\n  DropDatabaseOperation,\n  DropDatabaseOptions\n} from './operations/drop';\nimport { executeOperation } from './operations/execute_operation';\nimport {\n  CreateIndexesOptions,\n  CreateIndexOperation,\n  IndexInformationOperation,\n  IndexSpecification\n} from './operations/indexes';\nimport type { CollectionInfo, ListCollectionsOptions } from './operations/list_collections';\nimport { ProfilingLevelOperation, ProfilingLevelOptions } from './operations/profiling_level';\nimport { RemoveUserOperation, RemoveUserOptions } from './operations/remove_user';\nimport { RenameOperation, RenameOptions } from './operations/rename';\nimport { RunCommandOperation, RunCommandOptions } from './operations/run_command';\nimport {\n  ProfilingLevel,\n  SetProfilingLevelOperation,\n  SetProfilingLevelOptions\n} from './operations/set_profiling_level';\nimport { DbStatsOperation, DbStatsOptions } from './operations/stats';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference, ReadPreferenceLike } from './read_preference';\nimport {\n  Callback,\n  DEFAULT_PK_FACTORY,\n  filterOptions,\n  getTopology,\n  MongoDBNamespace,\n  resolveOptions\n} from './utils';\nimport { WriteConcern, WriteConcernOptions } from './write_concern';\n\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n  'writeConcern',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'authSource',\n  'ignoreUndefined',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'loggerLevel',\n  'logger',\n  'promoteBuffers',\n  'promoteLongs',\n  'bsonRegExp',\n  'enableUtf8Validation',\n  'promoteValues',\n  'compression',\n  'retryWrites'\n];\n\n/** @internal */\nexport interface DbPrivate {\n  client: MongoClient;\n  options?: DbOptions;\n  logger: Logger;\n  readPreference?: ReadPreference;\n  pkFactory: PkFactory;\n  readConcern?: ReadConcern;\n  bsonOptions: BSONSerializeOptions;\n  writeConcern?: WriteConcern;\n  namespace: MongoDBNamespace;\n}\n\n/** @public */\nexport interface DbOptions extends BSONSerializeOptions, WriteConcernOptions, LoggerOptions {\n  /** If the database authentication is dependent on another databaseName. */\n  authSource?: string;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n  /** A primary key factory object for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcern;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n}\n\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nexport class Db {\n  /** @internal */\n  s: DbPrivate;\n\n  public static SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\n  public static SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\n  public static SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\n  public static SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\n  public static SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\n  public static SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client: MongoClient, databaseName: string, options?: DbOptions) {\n    options = options ?? {};\n\n    // Filter the options\n    options = filterOptions(options, DB_OPTIONS_ALLOW_LIST);\n\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n\n    // Internal state of the db object\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Logger instance\n      logger: new Logger('Db', options),\n      // Unpack read preference\n      readPreference: ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: resolveBSONOptions(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName(): string {\n    return this.s.namespace.db;\n  }\n\n  // Options\n  get options(): DbOptions | undefined {\n    return this.s.options;\n  }\n\n  /**\n   * slaveOk specified\n   * @deprecated Use secondaryOk instead\n   */\n  get slaveOk(): boolean {\n    return this.secondaryOk;\n  }\n\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n  get secondaryOk(): boolean {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference(): ReadPreference {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  // get the write Concern\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get namespace(): string {\n    return this.s.namespace.toString();\n  }\n\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    options?: CreateCollectionOptions\n  ): Promise<Collection<TSchema>>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    options: CreateCollectionOptions | undefined,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    options?: CreateCollectionOptions | Callback<Collection>,\n    callback?: Callback<Collection>\n  ): Promise<Collection<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.client,\n      new CreateCollectionOperation(this, name, resolveOptions(this, options)) as TODO_NODE_3286,\n      callback\n    ) as TODO_NODE_3286;\n  }\n\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  command(command: Document): Promise<Document>;\n  command(command: Document, options: RunCommandOptions): Promise<Document>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  command(command: Document, callback: Callback<Document>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  command(command: Document, options: RunCommandOptions, callback: Callback<Document>): void;\n  command(\n    command: Document,\n    options?: RunCommandOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      this.s.client,\n      new RunCommandOperation(this, command, options ?? {}),\n      callback\n    );\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate<T extends Document = Document>(\n    pipeline: Document[] = [],\n    options?: AggregateOptions\n  ): AggregationCursor<T> {\n    if (arguments.length > 2) {\n      throw new MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\n    }\n    if (typeof pipeline === 'function') {\n      throw new MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\n    }\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new AggregationCursor(\n      this.s.client,\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /** Return the Admin db instance */\n  admin(): Admin {\n    return new Admin(this);\n  }\n\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection<TSchema extends Document = Document>(\n    name: string,\n    options: CollectionOptions = {}\n  ): Collection<TSchema> {\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    const finalOptions = resolveOptions(this, options);\n    return new Collection<TSchema>(this, name, finalOptions);\n  }\n\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  stats(): Promise<Document>;\n  stats(options: DbStatsOptions): Promise<Document>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  stats(callback: Callback<Document>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  stats(options: DbStatsOptions, callback: Callback<Document>): void;\n  stats(\n    options?: DbStatsOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    return executeOperation(\n      this.s.client,\n      new DbStatsOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * List all collections of this database with optional filter\n   *\n   * @param filter - Query to filter collections by\n   * @param options - Optional settings for the command\n   */\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: true }\n  ): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: false }\n  ): ListCollectionsCursor<CollectionInfo>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter?: Document, options?: ListCollectionsOptions): ListCollectionsCursor<T>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter: Document = {}, options: ListCollectionsOptions = {}): ListCollectionsCursor<T> {\n    return new ListCollectionsCursor<T>(this, filter, resolveOptions(this, options));\n  }\n\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string\n  ): Promise<Collection<TSchema>>;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options: RenameOptions\n  ): Promise<Collection<TSchema>>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options: RenameOptions,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options?: RenameOptions | Callback<Collection<TSchema>>,\n    callback?: Callback<Collection<TSchema>>\n  ): Promise<Collection<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    // Intentionally, we do not inherit options from parent for this operation.\n    options = { ...options, readPreference: ReadPreference.PRIMARY };\n\n    // Add return new collection\n    options.new_collection = true;\n\n    return executeOperation(\n      this.s.client,\n      new RenameOperation(\n        this.collection<TSchema>(fromCollection) as TODO_NODE_3286,\n        toCollection,\n        options\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropCollection(name: string): Promise<boolean>;\n  dropCollection(name: string, options: DropCollectionOptions): Promise<boolean>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  dropCollection(name: string, callback: Callback<boolean>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  dropCollection(name: string, options: DropCollectionOptions, callback: Callback<boolean>): void;\n  dropCollection(\n    name: string,\n    options?: DropCollectionOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.client,\n      new DropCollectionOperation(this, name, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropDatabase(): Promise<boolean>;\n  dropDatabase(options: DropDatabaseOptions): Promise<boolean>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  dropDatabase(callback: Callback<boolean>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  dropDatabase(options: DropDatabaseOptions, callback: Callback<boolean>): void;\n  dropDatabase(\n    options?: DropDatabaseOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.client,\n      new DropDatabaseOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  collections(): Promise<Collection[]>;\n  collections(options: ListCollectionsOptions): Promise<Collection[]>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  collections(callback: Callback<Collection[]>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  collections(options: ListCollectionsOptions, callback: Callback<Collection[]>): void;\n  collections(\n    options?: ListCollectionsOptions | Callback<Collection[]>,\n    callback?: Callback<Collection[]>\n  ): Promise<Collection[]> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.client,\n      new CollectionsOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  createIndex(name: string, indexSpec: IndexSpecification): Promise<string>;\n  createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options: CreateIndexesOptions\n  ): Promise<string>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  createIndex(name: string, indexSpec: IndexSpecification, callback: Callback<string>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options: CreateIndexesOptions,\n    callback: Callback<string>\n  ): void;\n  createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions | Callback<string>,\n    callback?: Callback<string>\n  ): Promise<string> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.client,\n      new CreateIndexOperation(this, name, indexSpec, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param password - An optional password for the new user\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  addUser(username: string): Promise<Document>;\n  addUser(username: string, password: string): Promise<Document>;\n  addUser(username: string, options: AddUserOptions): Promise<Document>;\n  addUser(username: string, password: string, options: AddUserOptions): Promise<Document>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  addUser(username: string, callback: Callback<Document>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  addUser(username: string, password: string, callback: Callback<Document>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  addUser(username: string, options: AddUserOptions, callback: Callback<Document>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  addUser(\n    username: string,\n    password: string,\n    options: AddUserOptions,\n    callback: Callback<Document>\n  ): void;\n  addUser(\n    username: string,\n    password?: string | AddUserOptions | Callback<Document>,\n    options?: AddUserOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof password === 'function') {\n      (callback = password), (password = undefined), (options = {});\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        (callback = options), (options = password), (password = undefined);\n      } else {\n        (options = password), (callback = undefined), (password = undefined);\n      }\n    } else {\n      if (typeof options === 'function') (callback = options), (options = {});\n    }\n\n    return executeOperation(\n      this.s.client,\n      new AddUserOperation(this, username, password, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  removeUser(username: string): Promise<boolean>;\n  removeUser(username: string, options: RemoveUserOptions): Promise<boolean>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  removeUser(username: string, callback: Callback<boolean>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  removeUser(username: string, options: RemoveUserOptions, callback: Callback<boolean>): void;\n  removeUser(\n    username: string,\n    options?: RemoveUserOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.client,\n      new RemoveUserOperation(this, username, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  setProfilingLevel(level: ProfilingLevel): Promise<ProfilingLevel>;\n  setProfilingLevel(\n    level: ProfilingLevel,\n    options: SetProfilingLevelOptions\n  ): Promise<ProfilingLevel>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  setProfilingLevel(level: ProfilingLevel, callback: Callback<ProfilingLevel>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  setProfilingLevel(\n    level: ProfilingLevel,\n    options: SetProfilingLevelOptions,\n    callback: Callback<ProfilingLevel>\n  ): void;\n  setProfilingLevel(\n    level: ProfilingLevel,\n    options?: SetProfilingLevelOptions | Callback<ProfilingLevel>,\n    callback?: Callback<ProfilingLevel>\n  ): Promise<ProfilingLevel> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.client,\n      new SetProfilingLevelOperation(this, level, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  profilingLevel(): Promise<string>;\n  profilingLevel(options: ProfilingLevelOptions): Promise<string>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  profilingLevel(callback: Callback<string>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  profilingLevel(options: ProfilingLevelOptions, callback: Callback<string>): void;\n  profilingLevel(\n    options?: ProfilingLevelOptions | Callback<string>,\n    callback?: Callback<string>\n  ): Promise<string> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.client,\n      new ProfilingLevelOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  indexInformation(name: string): Promise<Document>;\n  indexInformation(name: string, options: IndexInformationOptions): Promise<Document>;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  indexInformation(name: string, callback: Callback<Document>): void;\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\n  indexInformation(\n    name: string,\n    options: IndexInformationOptions,\n    callback: Callback<Document>\n  ): void;\n  indexInformation(\n    name: string,\n    options?: IndexInformationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      this.s.client,\n      new IndexInformationOperation(this, name, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Unref all sockets\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n  unref(): void {\n    getTopology(this).unref();\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch<\n    TSchema extends Document = Document,\n    TChange extends Document = ChangeStreamDocument<TSchema>\n  >(pipeline: Document[] = [], options: ChangeStreamOptions = {}): ChangeStream<TSchema, TChange> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TSchema, TChange>(this, pipeline, resolveOptions(this, options));\n  }\n\n  /** Return the db logger */\n  getLogger(): Logger {\n    return this.s.logger;\n  }\n\n  get logger(): Logger {\n    return this.s.logger;\n  }\n}\n\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName: string) {\n  if (typeof databaseName !== 'string')\n    throw new MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0)\n    throw new MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\n      throw new MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}